// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  @@map("groups")
  id              Int            @id @default(autoincrement())
  isPrivate       Boolean        @default(false)
  password        String?
  privateToken    String?        @unique
  name            String
  description     String?
  icon            String
  calendarMinTime String
  calendarMaxTime String
  // Relations
  events          Event[]
  availability    Availability[]
}

model Event {
  @@map("events")
  id           Int    @id @default(autoincrement())
  title        String
  description  String
  startTime    Int
  endTime      Int
  startTimeStr String
  endTimeStr   String
  // Relations
  group       Group  @relation(fields: [groupID], references: [id])
  groupID     Int
}

model Availability {
  @@map("availabilities")
  id         Int      @id @default(autoincrement())
  weekOf     String
  times      Json
  // Relations
  userName   String
  userNumber String
  group      Group    @relation(fields: [groupID], references: [id])
  groupID    Int
}
